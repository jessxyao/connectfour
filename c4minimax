import random
from sys import maxsize

##OR %% no class and just:
def minimax_decision(state, object):

def availablemoves(self, state):
    """Boolean to assess whether or not a move is possible.
    """
    for i in range(6):
        if state[i][j].lower() == "":
return True
    else:
return False

    def bestMove(self, state, marker):

    def heurVal(self, state, marker):
        """state is the board. Simple heuristic is (num of 4inarows)*10000 + (num of 3inarows)*1000 + (num of 2inarows)*10 - (num of opponent 4inarows)*10000 (num of opponent
            3inarows)*100 - (num of opponent 2inarows)*10
        """

        p1fours = self.checkstreak(state, marker, 4)
        p1threes = self.checkstreak(state, marker, 3)
        p1twos = self.checkstreak(state, marker, 2)
        p2fours = self.checkstreak(state, p2marker, 4)
        p2threes = self.checkstreak(state, p2marker, 3)
        p2twos = self.checkstreak(state, p2marker, 2)

        if marker == self.markers[0]:
            p2marker = self.markers[1]
        else:
            p2marker = self.markers[0]

        if p2fours > 0:
            return -10000 * p2fours
        else:
            return p1fours*10000 + p1threes*100 + p1twos*10

    def checkstreak(self, state, marker, streak):
        number = 0
        for i in range(6): #checking rows
            for j in range(7): #checking columns
            if state[i][j].lower() == marker.lower():
            number += self.horizstreak(i, j, state, streak)
            number += self.vertstreak(i, j, state, streak)
            number += self.diagstreak(i, j, state, streak)
        return number

    def horizstreak(self, row, col, state, streak):
        number1 = 0
        for j in range(col, 7):
            if state[row][j].lower() == state[row][col].lower():
                number1 += 1
            else:
                break #loop control

    def vertstreak(self, row, col, state, streak):
        number1 = 0
        for i in range(row, 6):
            if state[i][col].lower() == state[row][col].lower():
                number1 += 1
            else:
                break #loop control

    def diagstreak(self, row, col, state, streak):
        #check diagonals with positive and negative slopes lol
        diagnum = 0
        number1 = 0
        j = col
        i = row
        for i in range(row, 6):
            if j> 6:
                break
            elif state[i][j].lower() == state[row][col].lower():
                number1 += 1
            else:
                break
            j += 1
#check for negative slopes


    def searchdepth(self, depth, grid, curr_player_marker):
        """
        Searches in the tree at depth = `depth`
        return alpha: value calculated with the heuristic.
        """

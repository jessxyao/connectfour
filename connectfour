#what are classes?

from c4AIminimax import minimax

import random
import os
import time

class Game(object):

    """Code that holds Connect 4 game values"""
    def __init__(self):
        self.round = 1
        self.finished = False
        self.winner = None

    state = True
    board = None
    turn = None
    finished = None
    winner = None
    turn = None
    players = [None, None]
    markers = ["X", "O"]
    gamename = "Connect Four"

    def gameintro(self):
        print("Welcome to Connect 4! Should Player 1 be a human or a computer?")
        while self.players[0] == None:
            choice = str(input("Type 'h' or 'c':"))
            if choice == "human" or choice.lower() == "h":
                name = str(input("What is Player 1's name?"))
                self.players[0] = Player(name, self.markers[0])
            elif choice == "computer" or choice.lower() == "c":
                name = str(input("What is the computer's name?"))
                self.players[0] = AIPlayer(name, self.markers[0])
            else:
                print("I don't understand, please try again.")
        print("{0} will be {1}".format(self.players[0].name, self.markers[0]))
        print("Should Player 2 be a Human or a Computer?")
        while self.players[1] == None:
            choice = str(input("Type 'h' or 'c':"))
            if choice == "human" or choice.lower() == "h":
                name = str(input("What is Player 2's name? "))
                self.players[1] = Player(name, self.markers[1])
            elif choice == "computer" or choice.lower() == "c":
                name = str(input("What is the computers's name?"))
                self.players[1] = AIPlayer(name, self.markers[1])
            else:
                print("Invalid choice, please try again")
        print("{0} will be {1}".format(self.players[1].name, self.markers[1]))
        self.turn = self.players[0]

        self.board = []
        for i in range(6):
            self.board.append([])
            for j in range(7):
                self.board[i].append(' ')
    def CopyOfBoard():
        board = []
        for x in range(7):
            board.append([' '] * 6)
        return board

    mainboard = CopyOfBoard()

    def drawBoard(board):
        print(' 1  2  3  4  5  6  7 ')
        print('+--+--+--+--+--+--+--+')
        for y in range(6): # height of the matrix

            for x in range(1,7): # width of the matrix
                print('| {}' .format(board[x][y]), end="")
            print('|  |')
            print('+--+--+--+--+--+--+--+')

    drawBoard(mainboard)

    def InputItem():
    	item = ''
    	print('Welcome to C4!')
    	while not (item == 'X' or item == 'O') :
    		item = input('Player 1, do you want to be X or O?')

    	if item == 'X':
    		return ['X', 'O']
            ### assign X to player1, etc ##UNFINISHED FRIDAY 12/2
    	if item == 'O':
    		return ['O', 'X']

    def checkfourinarow(self):
            for i in range(6):
                for j in range(7):
                    if self.board[i][j] != ' ':
                        #check if vertical fourinarow starts at (i, j)
                        if self.checkVer(i,j):
                            self.finished = True
                            return

                        #check horizontal
                        if self.checkHor(i, j):
                            self.finished = True
                            return

                        #check diagonal
                        diag4, slope = self.checkDiag(i, j)
                        if diag4:
                            print(slope)
                            self.finished = True
                            return

    def checkVer(self, row, col):
        fourinarow = False
        consecutiveCount = 0

        for i in range(row, 6):
            if self.board[i][col].lower() == self.board[row][col].lower():
                consecutiveCount += 1
            else:
                break
        if consecutiveCount >= 4:
            fourinarow = True
            if self.players[0].marker.lower() == self.board[row][col].lower():
                self.winner = self.players[0]
            else:
                self.winner = self.players[1]
        return fourinarow

    def checkHor(self, row, col):
        fourinarow = False
        consecutiveCount = 0

        for j in range(col, 7):
            if self.board[row][j].lower() == self.board[row][col].lower():
                consecutiveCount += 1
            else:
                break

        if consecutiveCount >= 4:
            fourinarow = True
            if self.players[0].marker.lower() == self.board[row][col].lower():
                self.winner = self.players[0]
            else:
                self.winner = self.players[1]
        return fourinarow

    def checkDiag(self, row, col):
        fourinarow = False
        count = 0
        slope = None

            #diagonals with + slope

        consecutiveCount = 0
        j = col
        for i in range(row, 6):
            if j>6:
                break
            elif self.board[i][j].lower() == self.board[row][col].lower():
                consecutiveCount += 1
            else:
                break
            j += 1

        if consecutiveCount >= 4:
            count += 1
            slope = 'pos'
            if self.players[0].marker.lower() == self.board[row][col].lower():
                self.winner = self.players[0]
            else:
                self.winner = self.players[1]

            #- slope

        consecutiveCount = 0
        j = col
        for i in range(row, -1, -1):
            if j > 6:
                break
            elif self.board[i][j].lower() == self.board[row][col].lower():
                consecutiveCount += 1
            else:
                break
            j += 1

        if consecutiveCount >= 4:
            count += 1
            slope = 'neg'
            if self.players[0].marker.lower() == self.board[row][col].lower():
                self.winner = self.players[0]
            else:
                self.winner = self.players[1]

        if count > 0:
            fourinarow = True
        if count == 2:
            slope = 'both'
        return fourinarow, slope


    def state(self):
        #the board lol
        os.system( [ 'clear', 'cls' ][ os.name == 'nt' ] )

        print(u"{0}!".format(self.gamename))
        print("Round: " + str(self.round))

        for i in range(5, -1, -1):
            print("\t", end="")
            for j in range(7):
                print("| " + str(self.board[i][j]), end=" ")
            print("|")

        print("\t  _   _   _   _   _   _   _ ")
        print("\t  1   2   3   4   5   6   7 ")

        if self.finished:
            print("Game over.")
            if not self.winner:
                print(str(self.winner.name) + " is the winner")
            else:
                print("Game was a draw")

        '''self.turn = self.players[0]'''
        #have x go first (random decision)
        '''self.board = []
        for i in range(6):
            self.board.append([])
            for j in range(7):
                self.board[i].append('')'''

    def playGame(self):
        """Start new game function
        """
        self.round = 1
        self.finished = False
        self.winner = None
        self.turn = self.players[0]
        self.board = []
        for i in range(6):
            self.board.append([])
            for j in range(7):
                self.board[i].append('')

    def nextMove(self):
        player = self.turn
        if self.round > 42:
            self.finished = True
            return
            #stalemate

        move = player.move(self.board)

        for i in range(6):
            if self.board[i][move] == " ":
                self.board[i][move] = player.marker
                self.takeTurn()
                self.checkfourinarow()
                self.state()
                return

            #this means column is full
        print("Column is full, try again.")
        return

    def takeTurn(self):
            if self.turn == self.players[0]:
                self.turn = self.players[1]
            else:
                self.turn = self.players[0]

            self.round += 1
##write start new game function


#### AI is minimax

class Player(object):
    """class for human players
    """

    type = None
    name = None
    marker = None

    def __init__(self, name, marker):
        self.type = "human"
        self.name = name
        self.marker = marker


    def dropMarker():
        for y in range(6):
            if board[col][y] == "":
                board[col][y] = player1
                return

    def move(self, state):
        print("{0}'s turn. {0} is {1}".format(self.name, self.marker))
        col = None
        while col == None:
            try:
                choice = int(input("Enter a move by column number:")) - 1
            except ValueError:
                choice = None
            if 0 <= choice <= 6:
                col = choice
            else:
                print("Invalid choice, please enter a valid move.")
        return col

class AIPlayer(Player):
    """AI object that uses AI algorithm, minimax to extend upon player.
    """

    def __init__(self, name, marker):
        self.type = "AI"
        self.name = name
        self.marker = marker

    def move(self, state):
            print("{0}'s turn. {0} is {1}".format(self.name, self.marker))
            m = minimax(state)
            optimalmove, value = m.bestMove(state, self.marker)
            return optimalmove
